package com.facetecdemo;

import static java.util.UUID.randomUUID;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.util.Log;

import androidx.annotation.NonNull;

import com.facebook.react.bridge.ActivityEventListener;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.BaseActivityEventListener;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facetec.sdk.FaceTecCustomization;
import com.facetec.sdk.FaceTecIDScanResult;
import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import Processors.AuthenticateProcessor;
import Processors.Config;
import Processors.EnrollmentProcessor;
import Processors.LivenessCheckProcessor;
import Processors.NetworkingHelpers;
import Processors.PhotoIDMatchProcessor;
import Processors.PhotoIDScanProcessor;
import Processors.Processor;
import okhttp3.Call;


public class FaceTecModule extends ReactContextBaseJavaModule {

    private static final String REACT_CLASS = "Facetec";

    private static ReactApplicationContext reactContext;

    public FaceTecSessionResult latestSessionResult;
    public FaceTecIDScanResult latestIDScanResult;
    public Processor latestProcessor;
    String latestExternalDatabaseRefID = "";
    Callback onSuccess;
    Callback onError;
    private final ActivityEventListener mActivityEventListener = new BaseActivityEventListener() {
        @Override
        public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent intent) {
            if (latestProcessor == null) {
                return;
            }
            String serverResponse = latestProcessor.getServerResponse();
            if (latestProcessor.isSuccess()) {
                onSuccess.invoke(serverResponse);
            } else {
                latestExternalDatabaseRefID = "";
                onError.invoke(serverResponse);
            }
            latestProcessor = null;

        }
    };
    private boolean isSessionPreparingToLaunch = false;

    public FaceTecModule(ReactApplicationContext context) {
        super(context);
        reactContext = context;
        reactContext.addActivityEventListener(mActivityEventListener);
    }

    @NonNull
    @Override
    public String getName() {
        return REACT_CLASS;
    }

    @ReactMethod
    public void initializeSDK(ReadableMap config, Callback onSuccess, Callback onError) {
        Boolean isProd = config.getBoolean("isProd");
        String faceTecSDKKey = config.getString("SDKkey");
        String publicEncryptionKey = config.getString("publicEncryptionKey");
        String serverUrl = config.getString("serverUrl");
        String prodKeyText = config.getString("prodKeyText");

        Config.initializeFaceTecSDKFromAutogeneratedConfig(
                isProd,
                faceTecSDKKey,
                publicEncryptionKey,
                serverUrl,
                reactContext, prodKeyText,
                new FaceTecSDK.InitializeCallback() {
                    @Override
                    public void onCompletion(final boolean successful) {
                        WritableMap params = Arguments.createMap();
                        params.putBoolean("successful", successful);
                        params.putString("status", FaceTecSDK.getStatus(reactContext).toString());

                        if (successful) {
                            onSuccess.invoke(params);
                            Log.d("ReactNative", "Initialization Successful.");
                        } else {
                            onError.invoke(params);
                            Log.d("ReactNative", "Initialization Unsuccessful.");
                        }
                    }
                }
        );

    }

    @ReactMethod
    public void livenessCheck(Callback onSuccess, Callback onError) {
        isSessionPreparingToLaunch = true;
        this.onSuccess = onSuccess;
        this.onError = onError;
        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                resetLatestResults();
                isSessionPreparingToLaunch = false;
                latestProcessor = new LivenessCheckProcessor(sessionToken, getCurrentActivity(), FaceTecModule.this);
            }
        });
    }

    @ReactMethod
    public void enrollUser(String enrollUserId, Callback onSuccess, Callback onError) {
        isSessionPreparingToLaunch = true;
        this.onSuccess = onSuccess;
        this.onError = onError;
        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                resetLatestResults();
                isSessionPreparingToLaunch = false;
                latestProcessor = new EnrollmentProcessor(enrollUserId, sessionToken, getCurrentActivity(), FaceTecModule.this);
            }
        });
    }

    @ReactMethod
    public void authenticateUser(
            String authenticateUserId,
            Callback onSuccess,
            Callback onError
    ) {
        isSessionPreparingToLaunch = true;
        this.onSuccess = onSuccess;
        this.onError = onError;
        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                resetLatestResults();
                isSessionPreparingToLaunch = false;
                latestProcessor = new AuthenticateProcessor(authenticateUserId, sessionToken, getCurrentActivity(), FaceTecModule.this);
            }
        });
    }

    @ReactMethod
    public void identityCheck(Callback onSuccess, Callback onError) {
        isSessionPreparingToLaunch = true;
        this.onSuccess = onSuccess;
        this.onError = onError;
        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                resetLatestResults();
                isSessionPreparingToLaunch = false;
                latestExternalDatabaseRefID = "android_sample_app_" + randomUUID();
                latestProcessor = new PhotoIDMatchProcessor(sessionToken, getCurrentActivity(), FaceTecModule.this);
            }
        });
    }

    @ReactMethod
    public void setCustomization(ReadableMap theme) {
        FaceTecCustomization currentCustomization = Config.retrieveConfigurationWizardCustomization(theme);
        if (theme.hasKey("brandLogoName")) {
            int resourceId = getReactApplicationContext().getResources()
                    .getIdentifier(theme.getString("brandLogoName"), "drawable", getReactApplicationContext().getPackageName());
            if (resourceId != 0) {
                currentCustomization.getOverlayCustomization().brandingImage = resourceId;
            }

        }
        FaceTecSDK.setCustomization(currentCustomization);
    }




    @ReactMethod
    public void identityScanOnly(
            Callback onSuccess,
            Callback onError
    ) {
        isSessionPreparingToLaunch = true;
        this.onSuccess = onSuccess;
        this.onError = onError;

        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                resetLatestResults();
                isSessionPreparingToLaunch = false;
                latestProcessor = new PhotoIDScanProcessor(sessionToken, getCurrentActivity(), FaceTecModule.this);
            }
        });


    }

    //
    // DEVELOPER NOTE:  This is a convenience function for demonstration purposes only so the Sample App can have access to the latest session results.
    // In your code, you may not even want or need to do this.
    //
    public void setLatestSessionResult(FaceTecSessionResult sessionResult) {
        this.latestSessionResult = sessionResult;
    }

    //
    // DEVELOPER NOTE:  This is a convenience function for demonstration purposes only so the Sample App can have access to the latest id scan results.
    // In your code, you may not even want or need to do this.
    //
    public void setLatestIDScanResult(FaceTecIDScanResult idScanResult) {
        this.latestIDScanResult = idScanResult;
    }

    private void resetLatestResults() {
        this.latestSessionResult = null;
        this.latestIDScanResult = null;
    }

    public String getLatestExternalDatabaseRefID() {
        return latestExternalDatabaseRefID;
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
//        utils.showSessionTokenConnectionText();

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .header("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new okhttp3.Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if (!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
//                    utils.handleErrorGettingServerSessionToken();

                }
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if (responseJSON.has("sessionToken")) {
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
//                    utils.handleErrorGettingServerSessionToken();
                }
            }
        });
    }

    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

}