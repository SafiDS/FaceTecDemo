//
// FaceTec Device SDK config file.
// Auto-generated via the FaceTec SDK Configuration Wizard
//
import UIKit
import Foundation
import FaceTecSDK

class Config {

  static var deviceKeyIdentifier = ""
  static var baseURL = ""
  static var productionKeyText = ""
  static var publicEncryptionKey = ""

  static func initializeFaceTecSDKFromAutogeneratedConfig(config: NSDictionary, completion: @escaping (Bool)->()) {

    let isProd = config["isProd"] as? Bool ?? false
    self.deviceKeyIdentifier = config["SDKkey"] as? String ?? ""
    self.publicEncryptionKey = config["publicEncryptionKey"] as? String ?? ""
    self.baseURL = config["serverUrl"] as? String ?? ""
    self.productionKeyText = config["prodKeyText"] as? String ?? ""

    print(isProd, self.deviceKeyIdentifier, self.publicEncryptionKey, self.baseURL, self.productionKeyText)

    // set sdk localization language
    FaceTec.sdk.setLanguage(Config.getDeviceLanguage())


    if isProd {
      FaceTec.sdk.initializeInProductionMode(productionKeyText: productionKeyText, deviceKeyIdentifier: deviceKeyIdentifier, faceScanEncryptionKey: publicEncryptionKey, completion: { initializationSuccessful in
        completion(initializationSuccessful)
      })
    } else {
      FaceTec.sdk.initializeInDevelopmentMode(deviceKeyIdentifier: deviceKeyIdentifier, faceScanEncryptionKey: publicEncryptionKey, completion: { initializationSuccessful in
        completion(initializationSuccessful)
      })
    }
  }

  // -------------------------------------
  // This app can modify the customization to demonstrate different look/feel preferences
  // NOTE: This function is auto-populated by the FaceTec SDK Configuration Wizard based on your UI Customizations you picked in the Configuration Wizard GUI.
  public static func retrieveConfigurationWizardCustomization(theme:NSDictionary) -> FaceTecCustomization {

    let colorTheme: NSDictionary = theme["Colors"] as? NSDictionary ?? [:]

    let iconTheme: String = theme["brandLogoName"] as? String ?? "FaceTec_your_app_logo"

    let strOuterBackgroundColor: String = colorTheme["outerBackgroundColor"] as? String ?? "#ffffff"
    let strFrameColor: String = colorTheme["frameColor"] as? String ?? "#ffffff"
    let strBorderColor: String = colorTheme["borderColor"] as? String ?? "#417FB2"
    let strOvalColor: String = colorTheme["ovalColor"] as? String ?? "#417FB2"
    let strDualSpinnerColor: String = colorTheme["dualSpinnerColor"] as? String ?? "#417FB2"
    let strTextColor: String = colorTheme["textColor"] as? String ?? "#417FB2"
    let strButtonAndFeedbackBarColor: String = colorTheme["buttonAndFeedbackBarColor"] as? String ?? "#417FB2"
    let strButtonAndFeedbackBarTextColor: String = colorTheme["buttonAndFeedbackBarTextColor"] as? String ?? "#ffffff"
    let strButtonColorHighlight: String = colorTheme["buttonColorHighlight"] as? String ?? "#396E99"
    let strButtonColorDisabled: String = colorTheme["buttonColorDisabled"] as? String ?? "#B9CCDE"

    // For Color Customization
    let outerBackgroundColor = UIColor(hexString: strOuterBackgroundColor)
    let frameColor = UIColor(hexString: strFrameColor)
    let borderColor = UIColor(hexString: strBorderColor)
    let ovalColor = UIColor(hexString: strOvalColor)
    let dualSpinnerColor = UIColor(hexString: strDualSpinnerColor)
    let textColor = UIColor(hexString: strTextColor)
    let buttonAndFeedbackBarColor =  UIColor(hexString: strButtonAndFeedbackBarColor)
    let buttonAndFeedbackBarTextColor = UIColor(hexString: strButtonAndFeedbackBarTextColor)
    let buttonColorHighlight =  UIColor(hexString: strButtonColorHighlight)
    let buttonColorDisabled =  UIColor(hexString: strButtonColorDisabled)

    let feedbackBackgroundLayer = CAGradientLayer.init()
    feedbackBackgroundLayer.colors = [buttonAndFeedbackBarColor.cgColor, buttonAndFeedbackBarColor.cgColor]
    feedbackBackgroundLayer.locations = [0,1]
    feedbackBackgroundLayer.startPoint = CGPoint.init(x: 0, y: 0)
    feedbackBackgroundLayer.endPoint = CGPoint.init(x: 1, y: 0)

    // For Frame Corner Radius Customization
    let frameCornerRadius: Int32 = 20

    let cancelImage = UIImage(named: "FaceTec_cancel")
    let cancelButtonLocation: FaceTecCancelButtonLocation = .topLeft

    // For image Customization
    let yourAppLogoImage = UIImage(named: iconTheme) ?? UIImage(named: "FaceTec_your_app_logo")
    let securityWatermarkImage: FaceTecSecurityWatermarkImage = .faceTec

    // Set a default customization
    let defaultCustomization = FaceTecCustomization()


    // Set Frame Customization
    defaultCustomization.frameCustomization.cornerRadius = frameCornerRadius
    defaultCustomization.frameCustomization.backgroundColor = frameColor
    defaultCustomization.frameCustomization.borderColor = borderColor

    // Set Overlay Customization
    defaultCustomization.overlayCustomization.brandingImage = yourAppLogoImage
    defaultCustomization.overlayCustomization.backgroundColor = outerBackgroundColor

    // Set Guidance Customization
    defaultCustomization.guidanceCustomization.backgroundColors = [frameColor, frameColor]
    defaultCustomization.guidanceCustomization.foregroundColor = textColor
    defaultCustomization.guidanceCustomization.buttonBackgroundNormalColor = buttonAndFeedbackBarColor
    defaultCustomization.guidanceCustomization.buttonBackgroundDisabledColor = buttonColorDisabled
    defaultCustomization.guidanceCustomization.buttonBackgroundHighlightColor = buttonColorHighlight
    defaultCustomization.guidanceCustomization.buttonTextNormalColor = buttonAndFeedbackBarTextColor
    defaultCustomization.guidanceCustomization.buttonTextDisabledColor = buttonAndFeedbackBarTextColor
    defaultCustomization.guidanceCustomization.buttonTextHighlightColor = buttonAndFeedbackBarTextColor
    defaultCustomization.guidanceCustomization.retryScreenImageBorderColor = borderColor
    defaultCustomization.guidanceCustomization.retryScreenOvalStrokeColor = borderColor

    // Set Oval Customization
    defaultCustomization.ovalCustomization.strokeColor = ovalColor
    defaultCustomization.ovalCustomization.progressColor1 = dualSpinnerColor
    defaultCustomization.ovalCustomization.progressColor2 = dualSpinnerColor

    // Set Feedback Customization
    defaultCustomization.feedbackCustomization.backgroundColor = feedbackBackgroundLayer
    defaultCustomization.feedbackCustomization.textColor = buttonAndFeedbackBarTextColor

    // Set Cancel Customization
    defaultCustomization.cancelButtonCustomization.customImage = cancelImage
    defaultCustomization.cancelButtonCustomization.location = cancelButtonLocation

    // Set Result Screen Customization
    defaultCustomization.resultScreenCustomization.backgroundColors = [frameColor, frameColor]
    defaultCustomization.resultScreenCustomization.foregroundColor = textColor
    defaultCustomization.resultScreenCustomization.activityIndicatorColor = buttonAndFeedbackBarColor
    defaultCustomization.resultScreenCustomization.resultAnimationBackgroundColor = buttonAndFeedbackBarColor
    defaultCustomization.resultScreenCustomization.resultAnimationForegroundColor = buttonAndFeedbackBarTextColor
    defaultCustomization.resultScreenCustomization.uploadProgressFillColor = buttonAndFeedbackBarColor

    // Set Security Watermark Customization
    defaultCustomization.securityWatermarkImage = securityWatermarkImage

    // Set ID Scan Customization
    defaultCustomization.idScanCustomization.selectionScreenBackgroundColors = [frameColor, frameColor]
    defaultCustomization.idScanCustomization.selectionScreenForegroundColor = textColor
    defaultCustomization.idScanCustomization.reviewScreenBackgroundColors = [frameColor, frameColor]
    defaultCustomization.idScanCustomization.reviewScreenForegroundColor = buttonAndFeedbackBarTextColor
    defaultCustomization.idScanCustomization.reviewScreenTextBackgroundColor = buttonAndFeedbackBarColor
    defaultCustomization.idScanCustomization.captureScreenForegroundColor = buttonAndFeedbackBarTextColor
    defaultCustomization.idScanCustomization.captureScreenTextBackgroundColor = buttonAndFeedbackBarColor
    defaultCustomization.idScanCustomization.buttonBackgroundNormalColor = buttonAndFeedbackBarColor
    defaultCustomization.idScanCustomization.buttonBackgroundDisabledColor = buttonColorDisabled
    defaultCustomization.idScanCustomization.buttonBackgroundHighlightColor = buttonColorHighlight
    defaultCustomization.idScanCustomization.buttonTextNormalColor = buttonAndFeedbackBarTextColor
    defaultCustomization.idScanCustomization.buttonTextDisabledColor = buttonAndFeedbackBarTextColor
    defaultCustomization.idScanCustomization.buttonTextHighlightColor = buttonAndFeedbackBarTextColor
    defaultCustomization.idScanCustomization.captureScreenBackgroundColor = frameColor
    defaultCustomization.idScanCustomization.captureFrameStrokeColor = borderColor


    return defaultCustomization
  }

  static let wasSDKConfiguredWithConfigWizard = true

   public static func getDeviceLanguage() -> String {
        let preferredLanguage = Locale.preferredLanguages[0] as String
        let separatedComponents = preferredLanguage.components(separatedBy: "-")
        let languageCode: String = separatedComponents.first ?? "en"
        return languageCode
      }

}
