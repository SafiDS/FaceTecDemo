//
//  Facetec.swift
//  FacetecDemo
//
//  Created by ICS on 09/10/23.
//
import UIKit
import Foundation
import FaceTecSDK

@objc(Facetec)
class FacetecManager : NSObject, URLSessionDelegate {
  
  var latestSessionResult: FaceTecSessionResult!
  var latestIDScanResult: FaceTecIDScanResult!
  //  var utils: SampleAppUtilities!
  var latestProcessor: Processor!
  var latestExternalDatabaseRefID: String = ""
  var latestServerResult: [String: AnyObject]!
  
  var latestVC: UIViewController!
  var onSuccess: RCTResponseSenderBlock!
  var onError: RCTResponseSenderBlock!
  
  static let shared = FacetecManager()
  
  override init(){}
  
  /*
   * Get top view controller
   */
  private func getPresentedViewController(completion: @escaping (UIViewController) -> Void) -> Void {
    DispatchQueue.main.async {
      self.latestVC = RCTPresentedViewController()!
      completion(RCTPresentedViewController()!)
    }
  }
  
  /*
   * Initialize FaceTec SDK
   */
  @objc func initializeSDK(_ config:NSDictionary, onSuccess: @escaping RCTResponseSenderBlock, onError: @escaping RCTResponseSenderBlock) -> Void {
    
    Config.initializeFaceTecSDKFromAutogeneratedConfig(config: config, completion: { initializationSuccessful in
      if(initializationSuccessful) {
        onSuccess(["true"])
      }
      else {
        // Displays the FaceTec SDK Status to text field if init failed
        onError(["\(FaceTec.sdk.description(for: FaceTec.sdk.getStatus()))"])
      }
    })
  }
  
  
  @objc func setCustomization(_ theme:NSDictionary) -> Void {
    var currentCustomization: FaceTecCustomization = Config.retrieveConfigurationWizardCustomization(theme: theme)
    FaceTec.sdk.setCustomization(currentCustomization)
  }
  
  // Mark -------- Button Press - Start --------
  
  /*
   * In your code, you will be presenting from a UIViewController elsewhere. You may choose to augment this class to pass that UIViewController in.
   * In our example code here, to keep the code in this class simple, we will just get the Sample App's UIViewController statically.
   */
  @objc func livenessCheck(_ onSuccess: @escaping RCTResponseSenderBlock, onError: @escaping RCTResponseSenderBlock) -> Void {
    self.onSuccess = onSuccess
    self.onError = onError
    self.getPresentedViewController() { presentedVC in
      self.getSessionToken() { sessionToken in
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.
        self.resetLatestResults()
        self.latestProcessor = LivenessCheckProcessor(sessionToken: sessionToken, fromViewController: presentedVC, fromObject: self)
      }
    }
  }
  
  /*
   * In your code, you will be presenting from a UIViewController elsewhere. You may choose to augment this class to pass that UIViewController in.
   * In our example code here, to keep the code in this class simple, we will just get the Sample App's UIViewController statically.
   */
  @objc func enrollUser(_ enrollUserId : String, onSuccess: @escaping RCTResponseSenderBlock, onError: @escaping RCTResponseSenderBlock) -> Void {
    self.onSuccess = onSuccess
    self.onError = onError
    self.getPresentedViewController() { presentedVC in
      self.getSessionToken() { sessionToken in
        self.resetLatestResults()
        self.latestExternalDatabaseRefID = enrollUserId
        self.latestProcessor = EnrollmentProcessor(sessionToken: sessionToken, fromViewController: presentedVC, fromObject: self)
      }
    }
  }
  
  /*
   * In your code, you will be presenting from a UIViewController elsewhere. You may choose to augment this class to pass that UIViewController in.
   * In our example code here, to keep the code in this class simple, we will just get the Sample App's UIViewController statically.
   */
  @objc func authenticateUser(_ authenticateUserId : String, onSuccess: @escaping RCTResponseSenderBlock, onError: @escaping RCTResponseSenderBlock) -> Void {
    self.onSuccess = onSuccess
    self.onError = onError
    self.getPresentedViewController() { presentedVC in
      self.getSessionToken() { sessionToken in
        self.latestExternalDatabaseRefID = authenticateUserId
        // For demonstration purposes, verify that we have an externalDatabaseRefID to Authenticate against.
        if self.latestExternalDatabaseRefID.count == 0 {
          onError([["Error":"Please enroll first before trying authentication."]])
          return
        }
        self.resetLatestResults()
        self.latestProcessor = AuthenticateProcessor(sessionToken: sessionToken, fromViewController: presentedVC, fromObject: self)
      }
    }
  }
  
  @objc func identityCheck(_ onSuccess: @escaping RCTResponseSenderBlock, onError: @escaping RCTResponseSenderBlock) -> Void {
    self.onSuccess = onSuccess
    self.onError = onError
    self.getPresentedViewController() { presentedVC in
      self.getSessionToken() { sessionToken in
        self.resetLatestResults()
        self.latestExternalDatabaseRefID = "ios_sample_app_" + UUID().uuidString
        self.latestProcessor = PhotoIDMatchProcessor(sessionToken: sessionToken, fromViewController: presentedVC, fromObject: self)
      }
    }
  }
  
  @objc func identityScanOnly(_ onSuccess: @escaping RCTResponseSenderBlock, onError: @escaping RCTResponseSenderBlock) -> Void {
    self.onSuccess = onSuccess
    self.onError = onError
    self.getPresentedViewController() { presentedVC in
      self.getSessionToken() { sessionToken in
        self.resetLatestResults()
        self.latestProcessor = PhotoIDScanProcessor(sessionToken: sessionToken, fromViewController: presentedVC, fromObject: self)
      }
    }
  }
  
  // Mark -------- Button Press - End --------
  
  // Mark -------- Call backs --------
  //
  // DEVELOPER NOTE:  This is a convenience function for demonstration purposes only so the Sample App can have access to the latest session results.
  // In your code, you may not even want or need to do this.
  //
  func setLatestSessionResult(sessionResult: FaceTecSessionResult) {
    latestSessionResult = sessionResult
  }
  
  func setLatestIDScanResult(idScanResult: FaceTecIDScanResult) {
    latestIDScanResult = idScanResult
  }
  
  func resetLatestResults() {
    latestSessionResult = nil
    latestIDScanResult = nil
  }
  
  func getLatestExternalDatabaseRefID() -> String {
    return latestExternalDatabaseRefID;
  }
  
  func onComplete(result: [String: AnyObject] = [:], error: [String: AnyObject] = [:]) {
    //      self.utils.fadeInMainUI()
    //      self.utils.displayStatus(statusString: "See logs for more details.")
    
    if self.latestProcessor.isSuccess() {
      self.onSuccess([result])
    }else{
      // Reset the enrollment identifier.
      self.latestExternalDatabaseRefID = "";
      self.onError([error])
    }
    
    if (self.latestVC != nil) {
      self.latestVC.dismiss(animated: true, completion: nil)
    }
  }
  
  func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
    //      utils.startSessionTokenConnectionTextTimer();
    
    let endpoint = Config.baseURL + "/session-token"
    let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
    request.httpMethod = "GET"
    // Required parameters to interact with the FaceTec Managed Testing API.
    request.addValue(Config.deviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
    request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
    request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "X-User-Agent")
    
    let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
    let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
      // Ensure the data object is not nil otherwise callback with empty dictionary.
      guard let data = data else {
        print("Exception raised while attempting HTTPS call.")
        //              self.utils.handleErrorGettingServerSessionToken()
        return
      }
      if let responseJSONObj = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as! [String: AnyObject] {
        if((responseJSONObj["sessionToken"] as? String) != nil)
        {
          //                  self.utils.hideSessionTokenConnectionText()
          sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
          return
        }
        else {
          print("Exception raised while attempting HTTPS call.")
          //                  self.utils.handleErrorGettingServerSessionToken()
        }
      }
    })
    task.resume()
  }
}
